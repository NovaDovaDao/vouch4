enum AgreementStatus {
  EXPIRED
  PENDING_SIGNATURE
  REVOKED
  SIGNED
}

enum AgreementType {
  PRIVACY_POLICY
  TERMS_OF_SERVICE
  WAIVER
}

type Booking {
  bookedAt: DateTime!
  id: String!
}

type CheckIn {
  id: String!
  timestamp: DateTime!
}

type Class {
  bookings: [Booking!]
  capacity: Int!
  createdAt: DateTime
  description: String
  gym: Gym
  id: String!
  instructor: User
  name: String!
  scheduleDateTime: DateTime!
  updatedAt: DateTime
}

input ClassCreateInput {
  capacity: Int!
  description: String
  gymId: ID!
  instructorId: ID
  name: String!
  scheduleDateTime: String!
}

input ClassUpdateInput {
  capacity: Int
  description: String
  gymId: ID
  instructorId: ID
  name: String
  scheduleDateTime: String
}

scalar DateTime

type Gym {
  address: Json
  createdAt: DateTime!
  id: ID!
  legalDocsUrl: String
  legalEntityName: String
  name: String!
  updatedAt: DateTime!
}

type GymAddress {
  city: String
  country: String
  state: String
  street1: String
  zip: String
}

input GymAddressInput {
  city: String
  country: String
  state: String
  street1: String
  zip: String
}

input GymCreateInput {
  address: GymAddressInput!
  legalDocsUrl: String
  legalEntityName: String
  name: String!
}

input GymUpdateInput {
  address: GymAddressInput
  legalDocsUrl: String
  legalEntityName: String
  name: String
}

type InvitationToken {
  createdAt: DateTime!
  expiresAt: DateTime!
  id: String!
  token: String!
  userId: ID!
}

scalar Json

input MemberCreateInput {
  email: String!
  firstName: String!
  isActive: Boolean
  isSuperUser: Boolean
  lastName: String!
  phoneNumber: String
  walletAddress: String
}

input MemberUpdateInput {
  email: String
  firstName: String
  isActive: Boolean
  isSuperUser: Boolean
  lastName: String
  phoneNumber: String
  walletAddress: String
}

type MembershipNFT {
  createdAt: DateTime!
  expiresAt: DateTime
  id: ID!
  isActive: Boolean!
  isCurrentlyRented: Boolean!
  renterUserId: ID
  updatedAt: DateTime!
  userId: ID!
}

type Mutation {
  createClass(data: ClassCreateInput!): Class!
  createGym(data: GymCreateInput!): Gym!
  createMember(data: MemberCreateInput!): User!
  createStaff(data: StaffCreateInput!): User!
  createTenancy(data: TenancyCreateInput!): Tenancy!
  deleteClass(id: ID!): Boolean!
  deleteGym(id: ID!): Boolean!
  deleteMember(id: ID!): Boolean!
  deleteStaff(id: ID!): Boolean!
  setInitialPassword(password: String!, token: String!): User!
  updateClass(data: ClassUpdateInput!, id: ID!): Class!
  updateGym(data: GymUpdateInput!, id: ID!): Gym!
  updateMember(data: MemberUpdateInput!, id: ID!): User!
  updateStaff(data: StaffUpdateInput!, id: ID!): User!
  updateTenancy(data: TenancyUpdateInput!, id: ID!): Tenancy!
}

type Query {
  classById(id: ID!): Class!
  classes: [Class!]!
  contractById(id: ID!): UserTenancyAgreement!
  contracts: [UserTenancyAgreement!]!
  gymById(id: ID!): Gym
  gyms: [Gym!]!
  memberById(id: ID!): User!
  members: [User!]!
  membershipById(id: ID!): MembershipNFT!
  memberships: [MembershipNFT!]!
  staff: [User!]!
  staffById(id: ID!): User!
  tenancy: Tenancy!
}

input StaffCreateInput {
  email: String!
  firstName: String!
  isActive: Boolean
  isSuperUser: Boolean
  lastName: String!
  phoneNumber: String
  walletAddress: String
}

input StaffUpdateInput {
  email: String
  firstName: String
  isActive: Boolean
  isSuperUser: Boolean
  lastName: String
  phoneNumber: String
  walletAddress: String
}

type Tenancy {
  contactEmail: String!
  createdAt: DateTime!
  id: ID!
  legalName: String
  name: String!
  updatedAt: DateTime!
}

input TenancyCreateInput {
  contactEmail: String!
  legalName: String
  name: String!
}

input TenancyUpdateInput {
  contactEmail: String
  legalName: String
  name: String
}

type User {
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  isActive: Boolean!
  isSuperUser: Boolean!
  lastName: String!
  name: String
  phoneNumber: String
  updatedAt: DateTime!
  walletAddress: String
}

enum UserAtGymRole {
  CLEANING_STAFF
  FRONT_DESK_STAFF
  MANAGER
  ROUTE_SETTER
  TRAINER
}

type UserGymAssociation {
  assignedAt: DateTime!
  gymId: ID!
  isActiveAtGym: Boolean!
  permissions: Json
  roleAtGym: UserAtGymRole!
  updatedAt: DateTime!
  userId: ID!
}

type UserTenancyAgreement {
  createdAt: DateTime!
  documentVersion: String
  expiresAt: DateTime
  id: ID!
  signedAt: DateTime
  status: AgreementStatus!
  type: AgreementType!
  updatedAt: DateTime!
}