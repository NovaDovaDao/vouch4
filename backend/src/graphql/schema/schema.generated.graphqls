enum AgreementStatus {
  EXPIRED
  PENDING_SIGNATURE
  REVOKED
  SIGNED
}

enum AgreementType {
  PRIVACY_POLICY
  TERMS_OF_SERVICE
  WAIVER
}

type Booking {
  bookedAt: DateTime!
  id: String!
  member: Member!
}

input BookingsArgs {
  gymId: ID
}

type CheckIn {
  id: String!
  member: Member!
  timestamp: DateTime!
}

type ClassTemplate {
  capacity: Int!
  description: String
  gym: Gym!
  id: ID!
  instructor: Staff
  name: String!
  recurrence: String!
}

input ClassTemplateCreateInput {
  capacity: Int!
  description: String
  gymId: ID!
  instructorId: ID
  name: String!
  recurrence: String!
}

input ClassTemplateUpdateInput {
  capacity: Int
  description: String
  gymId: ID
  instructorId: ID
  name: String
  recurrence: String
}

input CreateEntitlementInput {
  expiresAt: DateOnly
  ownerId: ID!
  productId: ID!
  usesLeft: Int
  validFrom: DateOnly
}

input CreateProductInput {
  active: Boolean
  contractAddress: String
  description: String
  isNft: Boolean
  name: String!
  rules: Json!
}

scalar DateOnly

scalar DateTime

type Entitlement {
  expiresAt: DateOnly
  id: ID!
  isRented: Boolean!
  owner: Member!
  product: Product!
  renter: Member
  tokenId: String
  usesLeft: Int
  validFrom: DateOnly!
}

type Gym {
  address: Json
  id: ID!
  legalDocsUrl: String
  legalEntityName: String
  name: String!
}

type GymAddress {
  city: String
  country: String
  state: String
  street1: String
  zip: String
}

input GymAddressInput {
  city: String
  country: String
  state: String
  street1: String
  zip: String
}

input GymCreateInput {
  address: GymAddressInput!
  legalDocsUrl: String
  legalEntityName: String
  name: String!
}

input GymUpdateInput {
  address: GymAddressInput
  legalDocsUrl: String
  legalEntityName: String
  name: String
}

scalar Json

type Member implements Person {
  checkins: [CheckIn!]
  email: String!
  entitlements: [Entitlement!]!
  firstName: String!
  id: ID!
  isActive: Boolean!
  lastName: String!
  name: String
  phoneNumber: String
  walletAddress: String
}

input MemberCreateInput {
  email: String!
  firstName: String!
  isActive: Boolean
  lastName: String!
  phoneNumber: String
  walletAddress: String
}

input MemberUpdateInput {
  email: String
  firstName: String
  isActive: Boolean
  lastName: String
  phoneNumber: String
  walletAddress: String
}

type Mutation {
  createClassTemplate(data: ClassTemplateCreateInput!): ClassTemplate!
  createEntitlement(input: CreateEntitlementInput!): Entitlement!
  createGym(data: GymCreateInput!): Gym!
  createMember(data: MemberCreateInput!): Member!
  createProduct(input: CreateProductInput!): Product!
  createScheduledClass(input: ScheduledClassCreateInput!): ScheduledClass!
  createStaff(data: StaffCreateInput!): Staff!
  createTenancy(data: TenancyCreateInput!): Tenancy!
  deleteClassTemplate(id: ID!): Boolean!
  deleteGym(id: ID!): Boolean!
  deleteMember(id: ID!): Boolean!
  deleteScheduledClass(id: ID!): Boolean!
  deleteStaff(id: ID!): Boolean!
  memberAccessToken: String!
  setInitialPassword(password: String!, token: String!): StaffOrMember!
  updateClassTemplate(id: ID!, input: ClassTemplateUpdateInput!): ClassTemplate!
  updateGym(data: GymUpdateInput!, id: ID!): Gym!
  updateMember(id: ID!, input: MemberUpdateInput!): Member!
  updateProduct(id: ID!, input: UpdateProductInput!): Product!
  updateScheduledClass(id: ID!, input: ScheduledClassUpdateInput!): ScheduledClass!
  updateStaff(id: ID!, input: StaffUpdateInput!): Staff!
  updateTenancy(id: ID!, input: TenancyUpdateInput!): Tenancy!
}

interface Person {
  email: String!
  firstName: String!
  id: ID!
  isActive: Boolean!
  lastName: String!
  name: String
  phoneNumber: String
  walletAddress: String
}

type Price {
  amount: String
  currency: String
}

type Product {
  active: Boolean!
  contractAddress: String
  description: String
  id: ID!
  isNft: Boolean!
  name: String!
  price: Price
  rules: Json!
}

type Query {
  bookings(input: BookingsArgs): [Booking!]!
  classTemplateById(id: ID!): ClassTemplate!
  classTemplates: [ClassTemplate!]!
  contractById(id: ID!): UserTenancyAgreement!
  contracts: [UserTenancyAgreement!]!
  entitlementById(id: ID!): Entitlement
  entitlements(memberId: ID!): [Entitlement!]!
  gymById(id: ID!): Gym
  gyms: [Gym!]!
  memberById(id: ID!): Member!
  members: [Member!]!
  productById(id: ID!): Product
  products: [Product!]!
  scheduledClassById(id: ID!): ScheduledClass!
  scheduledClasses(args: ScheduledClassesArgs!): [ScheduledClass!]!
  search(input: SearchInput!): [SearchResult!]!
  staff: [Staff!]!
  staffById(id: ID!): Staff!
  tenancy: Tenancy!
}

type ScheduledClass {
  bookings: [Booking!]!
  description: String
  endTime: DateTime!
  gym: Gym!
  id: ID!
  instructor: Staff
  name: String!
  startTime: DateTime!
}

input ScheduledClassCreateInput {
  classTemplateId: ID!
  endTime: DateTime!
  startTime: DateTime!
}

input ScheduledClassUpdateInput {
  classTemplateId: ID
  endTime: DateTime
  startTime: DateTime
}

input ScheduledClassesArgs {
  classTemplateId: ID
  endDate: DateTime
  gymId: ID
  startDate: DateTime
}

input SearchInput {
  limit: Int
  query: String!
}

union SearchResult = ClassTemplate | Gym | Member | ScheduledClass | Staff

type Staff implements Person {
  email: String!
  firstName: String!
  id: ID!
  isActive: Boolean!
  isSuperUser: Boolean!
  lastName: String!
  name: String
  phoneNumber: String
  roles: [UserAtGymRole!]
  walletAddress: String
}

input StaffCreateInput {
  email: String!
  firstName: String!
  isActive: Boolean
  isSuperUser: Boolean
  lastName: String!
  phoneNumber: String
  walletAddress: String
}

union StaffOrMember = Member | Staff

input StaffUpdateInput {
  email: String
  firstName: String
  isActive: Boolean
  isSuperUser: Boolean
  lastName: String
  phoneNumber: String
  walletAddress: String
}

type Tenancy {
  contactEmail: String!
  id: ID!
  legalName: String
  name: String!
}

input TenancyCreateInput {
  contactEmail: String!
  legalName: String
  name: String!
}

input TenancyUpdateInput {
  contactEmail: String
  legalName: String
  name: String
}

input UpdateProductInput {
  active: Boolean
  contractAddress: String
  description: String
  isNft: Boolean
  name: String
  rules: Json
}

enum UserAtGymRole {
  CLEANING_STAFF
  FRONT_DESK_STAFF
  MANAGER
  ROUTE_SETTER
  TRAINER
}

type UserTenancyAgreement {
  documentVersion: String
  expiresAt: DateTime
  id: ID!
  signedAt: DateTime
  status: AgreementStatus!
  type: AgreementType!
}