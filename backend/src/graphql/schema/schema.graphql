scalar DateTime
scalar Json

enum UserAtGymRole {
  MANAGER
  TRAINER
  ROUTE_SETTER
  FRONT_DESK_STAFF
  CLEANING_STAFF
}

enum AgreementType {
  WAIVER
  TERMS_OF_SERVICE
  PRIVACY_POLICY
}

enum AgreementStatus {
  PENDING_SIGNATURE
  SIGNED
  EXPIRED
  REVOKED
}

# --- OBJECTS ---

type Tenancy {
  id: ID!
  name: String!
  legalName: String
  contactEmail: String!
}

type GymAddress {
  street1: String
  city: String
  state: String
  zip: String
  country: String
}

type Gym {
  id: ID!
  name: String!
  address: Json
  legalEntityName: String
  legalDocsUrl: String
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  name: String
  isSuperUser: Boolean!
  isActive: Boolean!
  walletAddress: String
  phoneNumber: String
}

type MembershipNFT {
  id: ID!
  user: User!
  renterUser: User
  expiresAt: DateTime
  isActive: Boolean!
  isCurrentlyRented: Boolean!
}

type UserTenancyAgreement {
  id: ID!
  type: AgreementType!
  status: AgreementStatus!
  documentVersion: String
  signedAt: DateTime
  expiresAt: DateTime
}

type Booking {
  id: String!
  bookedAt: DateTime!
  member: User!
}

type ClassTemplate {
  id: ID!
  name: String!
  description: String
  capacity: Int!
  gym: Gym!
  instructor: User
  recurrence: String!
}

type ScheduledClass {
  id: ID!
  name: String!
  description: String
  startTime: DateTime!
  endTime: DateTime!
  bookings: [Booking!]!
  gym: Gym!
  instructor: User
}

type CheckIn {
  id: String!
  timestamp: DateTime!
  member: User!
}

# --- INPUTS ---
input TenancyCreateInput {
  name: String!
  legalName: String
  contactEmail: String!
}

input TenancyUpdateInput {
  name: String
  legalName: String
  contactEmail: String
}

input ClassTemplateCreateInput {
  name: String!
  description: String
  capacity: Int!
  gymId: ID!
  instructorId: ID
  recurrence: String!
}

input ClassTemplateUpdateInput {
  name: String
  description: String
  capacity: Int
  gymId: ID
  instructorId: ID
  recurrence: String
}

input ScheduledClassesArgs {
  classTemplateId: ID
  gymId: ID
  startDate: DateTime
  endDate: DateTime
}

input ScheduledClassCreateInput {
  classTemplateId: ID!
  startTime: DateTime!
  endTime: DateTime!
}

input ScheduledClassUpdateInput {
  classTemplateId: ID
  startTime: DateTime
  endTime: DateTime
}

input GymAddressInput {
  street1: String
  city: String
  state: String
  zip: String
  country: String
}

input GymCreateInput {
  name: String!
  address: GymAddressInput!
  legalEntityName: String
  legalDocsUrl: String
}

input GymUpdateInput {
  name: String
  address: GymAddressInput
  legalEntityName: String
  legalDocsUrl: String
}

input MemberCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  isSuperUser: Boolean
  isActive: Boolean
  walletAddress: String
  phoneNumber: String
}

input MemberUpdateInput {
  email: String
  firstName: String
  lastName: String
  isSuperUser: Boolean
  isActive: Boolean
  walletAddress: String
  phoneNumber: String
}

input StaffCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  isSuperUser: Boolean
  isActive: Boolean
  walletAddress: String
  phoneNumber: String
}

input StaffUpdateInput {
  email: String
  firstName: String
  lastName: String
  isSuperUser: Boolean
  isActive: Boolean
  walletAddress: String
  phoneNumber: String
}

input BookingsArgs {
  gymId: ID
}

# --- QUERIES ---
type Query {
  staff: [User!]!
  staffById(id: ID!): User!

  classTemplates: [ClassTemplate!]!
  classTemplateById(id: ID!): ClassTemplate!
  scheduledClasses(args: ScheduledClassesArgs!): [ScheduledClass!]!
  scheduledClassById(id: ID!): ScheduledClass!

  tenancy: Tenancy!

  contracts: [UserTenancyAgreement!]!
  contractById(id: ID!): UserTenancyAgreement!

  members: [User!]!
  memberById(id: ID!): User!

  memberships: [MembershipNFT!]!
  membershipById(id: ID!): MembershipNFT!

  gyms: [Gym!]!
  gymById(id: ID!): Gym

  bookings(input: BookingsArgs): [Booking!]!
}

# --- MUTATIONS ---
type Mutation {
  createTenancy(data: TenancyCreateInput!): Tenancy!
  updateTenancy(id: ID!, input: TenancyUpdateInput!): Tenancy!

  createGym(data: GymCreateInput!): Gym!
  updateGym(id: ID!, data: GymUpdateInput!): Gym!
  deleteGym(id: ID!): Boolean!

  createClassTemplate(data: ClassTemplateCreateInput!): ClassTemplate!
  updateClassTemplate(id: ID!, input: ClassTemplateUpdateInput!): ClassTemplate!
  deleteClassTemplate(id: ID!): Boolean!
  createScheduledClass(input: ScheduledClassCreateInput!): ScheduledClass!
  updateScheduledClass(
    id: ID!
    input: ScheduledClassUpdateInput!
  ): ScheduledClass!
  deleteScheduledClass(id: ID!): Boolean!

  createStaff(data: StaffCreateInput!): User!
  updateStaff(id: ID!, input: StaffUpdateInput!): User!
  deleteStaff(id: ID!): Boolean!

  createMember(data: MemberCreateInput!): User!
  updateMember(id: ID!, input: MemberUpdateInput!): User!
  deleteMember(id: ID!): Boolean!
  setInitialPassword(token: String!, password: String!): User!
}
