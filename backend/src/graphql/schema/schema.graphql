scalar DateTime
scalar Json

enum UserAtGymRole {
  MANAGER
  TRAINER
  ROUTE_SETTER
  FRONT_DESK_STAFF
  CLEANING_STAFF
}

enum AgreementType {
  WAIVER
  TERMS_OF_SERVICE
  PRIVACY_POLICY
}

enum AgreementStatus {
  PENDING_SIGNATURE
  SIGNED
  EXPIRED
  REVOKED
}

# --- OBJECTS ---
type Tenancy {
  id: ID!
  name: String!
  legalName: String
  contactEmail: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type GymAddress {
  street1: String
  city: String
  state: String
  zip: String
  country: String
}

type Gym {
  id: ID!
  name: String!
  address: Json
  legalEntityName: String
  legalDocsUrl: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  name: String
  isSuperUser: Boolean!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  walletAddress: String
  phoneNumber: String
}

type MembershipNFT {
  id: ID!
  userId: ID!
  renterUserId: ID
  expiresAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  isActive: Boolean!
  isCurrentlyRented: Boolean!
}

type UserTenancyAgreement {
  id: ID!
  type: AgreementType!
  status: AgreementStatus!
  documentVersion: String
  signedAt: DateTime
  expiresAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserGymAssociation {
  userId: ID!
  gymId: ID!
  roleAtGym: UserAtGymRole!
  permissions: Json
  isActiveAtGym: Boolean!
  assignedAt: DateTime!
  updatedAt: DateTime!
}

# --- TENANCY INPUTS ---
input TenancyCreateInput {
  name: String!
  legalName: String
  contactEmail: String!
}

input TenancyUpdateInput {
  name: String
  legalName: String
  contactEmail: String
}

# --- CLASS INPUTS ---
input ClassCreateInput {
  name: String!
  description: String
  capacity: Int!
  gymId: ID!
  instructorId: ID
  scheduleDateTime: String!
}

input ClassUpdateInput {
  name: String
  description: String
  capacity: Int
  gymId: ID
  instructorId: ID
  scheduleDateTime: String
}

# --- GYM INPUTS ---
input GymAddressInput {
  street1: String
  city: String
  state: String
  zip: String
  country: String
}

input GymCreateInput {
  name: String!
  address: GymAddressInput!
  legalEntityName: String
  legalDocsUrl: String
}

input GymUpdateInput {
  name: String
  address: GymAddressInput
  legalEntityName: String
  legalDocsUrl: String
}

input MemberCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  isSuperUser: Boolean
  isActive: Boolean
  walletAddress: String
  phoneNumber: String
}

input MemberUpdateInput {
  email: String
  firstName: String
  lastName: String
  isSuperUser: Boolean
  isActive: Boolean
  walletAddress: String
  phoneNumber: String
}

input StaffCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  isSuperUser: Boolean
  isActive: Boolean
  walletAddress: String
  phoneNumber: String
}

input StaffUpdateInput {
  email: String
  firstName: String
  lastName: String
  isSuperUser: Boolean
  isActive: Boolean
  walletAddress: String
  phoneNumber: String
}

type Booking {
  id: String!
  bookedAt: DateTime!
}

type InvitationToken {
  id: String!
  token: String!
  userId: ID!
  expiresAt: DateTime!
  createdAt: DateTime!
}

type Class {
  id: String!
  name: String!
  description: String
  scheduleDateTime: DateTime!
  capacity: Int!
  gym: Gym
  instructor: User
  createdAt: DateTime
  updatedAt: DateTime
  bookings: [Booking!]
}

type CheckIn {
  id: String!
  timestamp: DateTime!
}

type Query {
  # --- STAFF QUERIES ---
  staff: [User!]!
  staffById(id: ID!): User!

  # --- CLASS QUERIES ---
  classes: [Class!]!
  classById(id: ID!): Class!

  # --- TENANCY QUERIES ---
  tenancy: Tenancy!

  # --- CONTRACT QUERIES ---
  contracts: [UserTenancyAgreement!]!
  contractById(id: ID!): UserTenancyAgreement!

  # --- MEMBER QUERIES ---
  members: [User!]!
  memberById(id: ID!): User!

  # --- MEMBERSHIPS QUERIES ---
  memberships: [MembershipNFT!]!
  membershipById(id: ID!): MembershipNFT!

  # --- GYM QUERIES ---
  gyms: [Gym!]!
  gymById(id: ID!): Gym
}

type Mutation {
  # --- TENANCY MUTATIONS ---
  createTenancy(data: TenancyCreateInput!): Tenancy!
  updateTenancy(id: ID!, data: TenancyUpdateInput!): Tenancy!

  # --- GYM MUTATIONS ---
  createGym(data: GymCreateInput!): Gym!
  updateGym(id: ID!, data: GymUpdateInput!): Gym!
  deleteGym(id: ID!): Boolean!

  # --- CLASS MUTATIONS ---
  createClass(data: ClassCreateInput!): Class!
  updateClass(id: ID!, data: ClassUpdateInput!): Class!
  deleteClass(id: ID!): Boolean!

  # --- STAFF MUTATIONS ---
  createStaff(data: StaffCreateInput!): User!
  updateStaff(id: ID!, data: StaffUpdateInput!): User!
  deleteStaff(id: ID!): Boolean!

  # --- MEMBER MUTATIONS ---
  createMember(data: MemberCreateInput!): User!
  updateMember(id: ID!, data: MemberUpdateInput!): User!
  deleteMember(id: ID!): Boolean!
}
